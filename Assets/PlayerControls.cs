//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""97a83619-d054-4190-985b-bc33caaa9e44"",
            ""actions"": [
                {
                    ""name"": ""powerUpOne"",
                    ""type"": ""Button"",
                    ""id"": ""7b6b250a-ec03-4744-89bc-2f4e205ce3a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fly"",
                    ""type"": ""Button"",
                    ""id"": ""6a028970-85da-4289-bb56-c02e49f7c1c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""unMount"",
                    ""type"": ""Button"",
                    ""id"": ""3fc4671a-b1c6-4fa6-b6d6-4cba0519af4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""powerUpTwo"",
                    ""type"": ""Button"",
                    ""id"": ""f9af7e84-3305-4580-841a-16b32f310457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""powerUpThree"",
                    ""type"": ""Button"",
                    ""id"": ""696d02a5-3b75-47c8-850e-553e9b570af0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""fe1f6ce5-21a3-462c-a626-b5d0a3c3c599"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""f6ceaa94-9b1a-478e-ab1f-9a9f1d550494"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0889e40-8ace-4323-b2f4-9db90095b289"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""powerUpOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fbe7fb6-131a-4771-9507-a3cce9b0a33f"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ddf68f9-32b9-4061-90cf-caaeca56c0f6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""unMount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3683f4b8-55b6-4d6e-8529-e4d728b752d4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""powerUpTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99c73f9b-e992-44e8-a0c8-fc56ce576358"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""powerUpThree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""608fdaf1-13a3-4e8e-a6c1-3faaf0fc44fb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""789edee1-19ae-4a0f-bc30-44a0bde51407"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_powerUpOne = m_Gameplay.FindAction("powerUpOne", throwIfNotFound: true);
        m_Gameplay_Fly = m_Gameplay.FindAction("Fly", throwIfNotFound: true);
        m_Gameplay_unMount = m_Gameplay.FindAction("unMount", throwIfNotFound: true);
        m_Gameplay_powerUpTwo = m_Gameplay.FindAction("powerUpTwo", throwIfNotFound: true);
        m_Gameplay_powerUpThree = m_Gameplay.FindAction("powerUpThree", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Newaction = m_Gameplay.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_powerUpOne;
    private readonly InputAction m_Gameplay_Fly;
    private readonly InputAction m_Gameplay_unMount;
    private readonly InputAction m_Gameplay_powerUpTwo;
    private readonly InputAction m_Gameplay_powerUpThree;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Newaction;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @powerUpOne => m_Wrapper.m_Gameplay_powerUpOne;
        public InputAction @Fly => m_Wrapper.m_Gameplay_Fly;
        public InputAction @unMount => m_Wrapper.m_Gameplay_unMount;
        public InputAction @powerUpTwo => m_Wrapper.m_Gameplay_powerUpTwo;
        public InputAction @powerUpThree => m_Wrapper.m_Gameplay_powerUpThree;
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Newaction => m_Wrapper.m_Gameplay_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @powerUpOne.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpOne;
                @powerUpOne.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpOne;
                @powerUpOne.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpOne;
                @Fly.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFly;
                @Fly.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFly;
                @Fly.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFly;
                @unMount.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnUnMount;
                @unMount.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnUnMount;
                @unMount.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnUnMount;
                @powerUpTwo.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpTwo;
                @powerUpTwo.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpTwo;
                @powerUpTwo.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpTwo;
                @powerUpThree.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpThree;
                @powerUpThree.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpThree;
                @powerUpThree.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPowerUpThree;
                @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Newaction.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @powerUpOne.started += instance.OnPowerUpOne;
                @powerUpOne.performed += instance.OnPowerUpOne;
                @powerUpOne.canceled += instance.OnPowerUpOne;
                @Fly.started += instance.OnFly;
                @Fly.performed += instance.OnFly;
                @Fly.canceled += instance.OnFly;
                @unMount.started += instance.OnUnMount;
                @unMount.performed += instance.OnUnMount;
                @unMount.canceled += instance.OnUnMount;
                @powerUpTwo.started += instance.OnPowerUpTwo;
                @powerUpTwo.performed += instance.OnPowerUpTwo;
                @powerUpTwo.canceled += instance.OnPowerUpTwo;
                @powerUpThree.started += instance.OnPowerUpThree;
                @powerUpThree.performed += instance.OnPowerUpThree;
                @powerUpThree.canceled += instance.OnPowerUpThree;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnPowerUpOne(InputAction.CallbackContext context);
        void OnFly(InputAction.CallbackContext context);
        void OnUnMount(InputAction.CallbackContext context);
        void OnPowerUpTwo(InputAction.CallbackContext context);
        void OnPowerUpThree(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
}
